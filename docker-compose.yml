version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.12.0
    container_name: elasticsearch
    restart: always
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"]
      interval: 10s
      timeout: 60s
      retries: 5
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_app
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL...'; 
        while ! pg_isready -h db -U ${POSTGRES_USER}; do sleep 2; done;
        echo 'PostgreSQL is ready!';

        echo 'Waiting for Elasticsearch...'; 
        while ! curl -s -o /dev/null http://elasticsearch:9200/_cluster/health?wait_for_status=yellow; do sleep 2; done;
        echo 'Elasticsearch is ready!';
        
        python manage.py makemigrations &&
        python manage.py migrate && 
        python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    links:
      - elasticsearch
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}

volumes:
  postgres_data:
  elastic_data:
